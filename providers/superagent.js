// Generated by LiveScript 1.6.0
(function(){
  var superagent, extendProxy, corsService, proxyServers, makeRandom, tryProxy, buildRequest, post, put, get, out$ = typeof exports != 'undefined' && exports || this;
  superagent = require('superagent');
  extendProxy = require('superagent-proxy');
  extendProxy(superagent);
  corsService = {
    get: function(arg$, cb){
      var args, type, instance;
      args = arg$.args, type = arg$.type;
      instance = superagent.get("https://cors-anywhere.herokuapp.com/" + args[0], args[1]);
      if (type != null) {
        instance.type(type);
      }
      return instance.timeout({
        deadline: 5000
      }).end(cb);
    }
  };
  proxyServers = ['http://207.176.218.185:1321', 'http://207.176.218.193:1321', 'http://168.63.43.102:3128'];
  makeRandom = function(length){
    var max;
    if (length === 0) {
      return 0;
    }
    max = length - 1;
    return Math.round(Math.random() * max);
  };
  tryProxy = function(arg$, cb){
    var method, args, type, err, num, instance;
    method = arg$.method, args = arg$.args, type = arg$.type, err = arg$.err;
    num = makeRandom(proxyServers.length);
    if (superagent[method] == null) {
      return cb(err);
    }
    instance = superagent[method](args[0], args[1]);
    //instance.proxy(proxyServers[num]);
    if (type != null) {
      instance.type(type);
    }
    return instance.timeout({
      deadline: 10000
    }).end(function(err2, data){
      var m;
      if (!err2) {
        return cb(null, data);
      }
      m = corsService[method];
      if (m == null) {
        return cb(err, data);
      }
      if (m != null) {
        return m({
          args: args,
          type: type
        }, cb);
      }
      return cb(err, data);
    });
  };
  buildRequest = function(method){
    return function(){
      var args, res$, i$, to$, originalRequest, $;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      args = res$;
      originalRequest = superagent[method];
      $ = {};
      $.timeout = function(timeout){
        $._timeout = timeout;
        return $;
      };
      $.type = function(type){
        $._type = type;
        return $;
      };
      $.end = function(cb){
        var instance;
        instance = originalRequest.apply(originalRequest, args);
        if ($._type != null) {
          instance.type($._type);
        }
        if ($._timeout != null) {
          instance.timeout($._timeout);
        }
        return instance.end(function(err, data){
          if (err != null) {
            return tryProxy({
              method: method,
              args: args,
              type: $._type,
              err: err
            }, cb);
          }
          return cb(err, data);
        });
      };
      return $;
    };
  };
  out$.post = post = buildRequest('post');
  out$.put = put = buildRequest('put');
  out$.get = get = buildRequest('get');
}).call(this);
